{
  "paragraphs": [
    {
      "text": "os.environ[\"KERAS_BACKEND\"] \u003d \"theano\"\nos.environ[\u0027THEANO_FLAGS\u0027] \u003d \u0027floatX\u003dfloat32,device\u003dcuda,dnn.library_path\u003d/usr/local/cuda/lib64,dnn.include_path\u003d/usr/local/cuda/include/\u0027\nos.environ[\u0027MKL_THREADING_LAYER\u0027] \u003d \"GNU\"",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 7:09:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516357103389_788940285",
      "id": "20180119-101823_522129559_q_NPKFWAZ9U61527181075",
      "dateCreated": "Jan 19, 2018 10:18:23 AM",
      "dateSubmitted": "May 25, 2018 7:09:46 AM",
      "dateStarted": "May 25, 2018 7:09:46 AM",
      "dateFinished": "May 25, 2018 7:09:46 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Confirming backend is changed to Theano\nfrom __future__ import print_function\nimport keras\nfrom keras import backend as K\nprint(K.backend())",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 7:09:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516357110452_-2027036915",
      "id": "20180119-101830_1688872267_q_NPKFWAZ9U61527181075",
      "dateCreated": "Jan 19, 2018 10:18:30 AM",
      "dateSubmitted": "May 25, 2018 7:09:46 AM",
      "dateStarted": "May 25, 2018 7:09:46 AM",
      "dateFinished": "May 25, 2018 7:09:46 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\"\"\"\n    The MNIST dataset contains 60000 training images of 28x28 size and 10000 testing greyscale images of 28x28 size.\n    \n    The dataset is divided into one training batch with 60000 images and one test batch with 10000 images.\n    \n    Each batch contains a dictionary with the following elements:-\n    \n    data -- a 60000x28x28 numpy array of uint8s in case of training sample and 10000x28x28 numpy array of uint8s in case of testing sample. The first dimension of the array \n    marks the image number and the other dimensions is for the image matrix.\n    labels -- a list of 60000 numbers which are either 0 or 1 for training sample and 10000 numbers  for testing sample. The number at index i indicates the label of the ith     image in the array data.\n    \n\"\"\"\n\n# importing necessary libraries for the neural network such as keras and its layer types.\n\nfrom __future__ import print_function\n\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.layers import SimpleRNN\nfrom keras import initializers\nfrom keras.optimizers import RMSprop\n\n# setting the parameters used in the model such as batch_size, number of classes, learning rate etc.\nbatch_size \u003d 32\nnum_classes \u003d 10\nepochs \u003d 1\nhidden_units \u003d 100\nlearning_rate \u003d 1e-6\nclip_norm \u003d 1.0\n\n# loading the data, shuffled and split between train and test sets.\n(x_train, y_train), (x_test, y_test) \u003d mnist.load_data()\n\n#reshaping the training and testing data and converting their data types as float32 from uint8.\nx_train \u003d x_train.reshape(x_train.shape[0], -1, 1)\nx_test \u003d x_test.reshape(x_test.shape[0], -1, 1)\nx_train \u003d x_train.astype(\u0027float32\u0027)\nx_test \u003d x_test.astype(\u0027float32\u0027)\nx_train /\u003d 255\nx_test /\u003d 255\n\nprint(\u0027x_train shape:\u0027, x_train.shape)\nprint(x_train.shape[0], \u0027train samples\u0027)\nprint(x_test.shape[0], \u0027test samples\u0027)\n\n# converting class vectors to binary class matrices. This gives a binary representaion of the input class vectors.Used when categorical_crossentropy is to be used. Or the classes are not binary.\n\ny_train \u003d keras.utils.to_categorical(y_train, num_classes)\ny_test \u003d keras.utils.to_categorical(y_test, num_classes)\n\nprint(\u0027Evaluate IRNN...\u0027)\n\n# building the sequential RNN model.\nmodel \u003d Sequential()\n\n# adding RNN layer with Identity matrix as initialzers, \u0027relu\u0027 as activation function.\nmodel.add(SimpleRNN(hidden_units,\n                    kernel_initializer\u003dinitializers.RandomNormal(stddev\u003d0.001),\n                    recurrent_initializer\u003dinitializers.Identity(gain\u003d1.0),\n                    activation\u003d\u0027relu\u0027,\n                    input_shape\u003dx_train.shape[1:]))\n\n# adding a dense(fully connected) layer with nodes equal to the number of classes.\nmodel.add(Dense(num_classes))\n\n# applying softmax activation on the output from the previous dense layer.\nmodel.add(Activation(\u0027softmax\u0027))\n\n# using RMSprop as the activation function.\nrmsprop \u003d RMSprop(lr\u003dlearning_rate)\n\n# compiling the RNN Model.\nmodel.compile(loss\u003d\u0027categorical_crossentropy\u0027,\n              optimizer\u003drmsprop,\n              metrics\u003d[\u0027accuracy\u0027])\n\n# training the model using the training MNIST data.\nmodel.fit(x_train, y_train,\n          batch_size\u003dbatch_size,\n          epochs\u003depochs,\n          verbose\u003d1,\n          validation_data\u003d(x_test, y_test))\n\n# finally evaluating and printing the accuracy of the trained model.\nscores \u003d model.evaluate(x_test, y_test, verbose\u003d0)\nprint(\u0027IRNN test score:\u0027, scores[0])\nprint(\u0027IRNN test accuracy:\u0027, scores[1])\n\n#Output is a real number which is accuracy in the range 0-1.",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 7:09:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1515669257896_1644416395",
      "id": "20180111-111417_341942324_q_NPKFWAZ9U61527181075",
      "dateCreated": "Jan 11, 2018 11:14:17 AM",
      "dateSubmitted": "May 25, 2018 7:09:46 AM",
      "dateStarted": "May 25, 2018 7:09:46 AM",
      "dateFinished": "May 25, 2018 7:15:27 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 7:09:46 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516359921851_1373278859",
      "id": "20180119-110521_1846139491_q_NPKFWAZ9U61527181075",
      "dateCreated": "Jan 19, 2018 11:05:21 AM",
      "dateSubmitted": "May 25, 2018 7:09:47 AM",
      "dateStarted": "May 25, 2018 7:15:27 AM",
      "dateFinished": "May 25, 2018 7:15:27 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "MNIST_IRNN",
  "id": "NPKFWAZ9U61527181075",
  "angularObjects": {
    "2DEK3QV851090031527168688484:shared_process": [],
    "2DENTX6JV1090031527168688466:shared_process": [],
    "2DGXYBXH81090031527181090114:shared_process": [],
    "2DDED8P751090031527168688477:shared_process": [],
    "2DE8JRQYX1090031527228139990:shared_process": [],
    "2DDBWFX441090031527168688480:shared_process": []
  },
  "config": {
    "isDashboard": false,
    "defaultLang": "pyspark"
  },
  "info": {},
  "source": "FCN"
}