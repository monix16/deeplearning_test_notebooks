{
  "paragraphs": [
    {
      "text": "os.environ[\"KERAS_BACKEND\"] \u003d \"theano\"\nos.environ[\u0027THEANO_FLAGS\u0027] \u003d \u0027floatX\u003dfloat32,device\u003dcuda,dnn.library_path\u003d/usr/local/cuda/lib64,dnn.include_path\u003d/usr/local/cuda/include/\u0027\nos.environ[\u0027MKL_THREADING_LAYER\u0027] \u003d \"GNU\"",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 6:16:30 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516357510398_-1362948802",
      "id": "20180119-102510_1281016588_q_4HFN7W1DYF1527178877",
      "dateCreated": "Jan 19, 2018 10:25:10 AM",
      "dateSubmitted": "May 25, 2018 6:16:30 AM",
      "dateStarted": "May 25, 2018 6:16:30 AM",
      "dateFinished": "May 25, 2018 6:16:30 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Confirming backend is changed to Theano\nfrom __future__ import print_function\nimport keras\nfrom keras import backend as K\nprint(K.backend())",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 6:16:30 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516357522600_1375324444",
      "id": "20180119-102522_1805843399_q_4HFN7W1DYF1527178877",
      "dateCreated": "Jan 19, 2018 10:25:22 AM",
      "dateSubmitted": "May 25, 2018 6:16:30 AM",
      "dateStarted": "May 25, 2018 6:16:30 AM",
      "dateFinished": "May 25, 2018 6:16:30 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "from __future__ import print_function\nimport keras\nfrom keras.layers import Dense, Conv2D, BatchNormalization, Activation\nfrom keras.layers import AveragePooling2D, Input, Flatten\nfrom keras.optimizers import Adam\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler\nfrom keras.callbacks import ReduceLROnPlateau\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.regularizers import l2\nfrom keras import backend as K\nfrom keras.models import Model\nfrom keras.datasets import cifar10\nimport numpy as np\nimport os\n\n# Training parameters\nbatch_size \u003d 32  # orig paper trained all networks with batch_size\u003d128\nepochs \u003d 1\ndata_augmentation \u003d True\nnum_classes \u003d 10\n\n# Subtracting pixel mean improves accuracy\nsubtract_pixel_mean \u003d True\n\n# Model parameter\n# ----------------------------------------------------------------------------\n#           |      | 200-epoch | Orig Paper| 200-epoch | Orig Paper| sec/epoch\n# Model     |  n   | ResNet v1 | ResNet v1 | ResNet v2 | ResNet v2 | GTX1080Ti\n#           |v1(v2)| %Accuracy | %Accuracy | %Accuracy | %Accuracy | v1 (v2)\n# ----------------------------------------------------------------------------\n# ResNet20  | 3 (2)| 92.16     | 91.25     | -----     | -----     | 35 (---)\n# ResNet32  | 5(NA)| 92.46     | 92.49     | NA        | NA        | 50 ( NA)\n# ResNet44  | 7(NA)| 92.50     | 92.83     | NA        | NA        | 70 ( NA)\n# ResNet56  | 9 (6)| 92.71     | 93.03     | 93.01     | NA        | 90 (100)\n# ResNet110 |18(12)| 92.65     | 93.39+-.16| 93.15     | 93.63     | 165(180)\n# ResNet164 |27(18)| -----     | 94.07     | -----     | 94.54     | ---(---)\n# ResNet1001| (111)| -----     | 92.39     | -----     | 95.08+-.14| ---(---)\n# ---------------------------------------------------------------------------\nn \u003d 3\n\n# Model version\n# Orig paper: version \u003d 1 (ResNet v1), Improved ResNet: version \u003d 2 (ResNet v2)\nversion \u003d 1\n\n# Computed depth from supplied model parameter n\nif version \u003d\u003d 1:\n    depth \u003d n * 6 + 2\nelif version \u003d\u003d 2:\n    depth \u003d n * 9 + 2\n\n# Model name, depth and version\nmodel_type \u003d \u0027ResNet%dv%d\u0027 % (depth, version)\n\n# Load the CIFAR10 data.\n(x_train, y_train), (x_test, y_test) \u003d cifar10.load_data()\n\n# Input image dimensions.\ninput_shape \u003d x_train.shape[1:]\n\n# Normalize data.\nx_train \u003d x_train.astype(\u0027float32\u0027) / 255\nx_test \u003d x_test.astype(\u0027float32\u0027) / 255\n\n# If subtract pixel mean is enabled\nif subtract_pixel_mean:\n    x_train_mean \u003d np.mean(x_train, axis\u003d0)\n    x_train -\u003d x_train_mean\n    x_test -\u003d x_train_mean\n\nprint(\u0027x_train shape:\u0027, x_train.shape)\nprint(x_train.shape[0], \u0027train samples\u0027)\nprint(x_test.shape[0], \u0027test samples\u0027)\nprint(\u0027y_train shape:\u0027, y_train.shape)\n\n# Convert class vectors to binary class matrices.\ny_train \u003d keras.utils.to_categorical(y_train, num_classes)\ny_test \u003d keras.utils.to_categorical(y_test, num_classes)\n\n\ndef lr_schedule(epoch):\n    \"\"\"Learning Rate Schedule\n    Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.\n    Called automatically every epoch as part of callbacks during training.\n    # Arguments\n        epoch (int): The number of epochs\n    # Returns\n        lr (float32): learning rate\n    \"\"\"\n    lr \u003d 1e-3\n    if epoch \u003e 180:\n        lr *\u003d 0.5e-3\n    elif epoch \u003e 160:\n        lr *\u003d 1e-3\n    elif epoch \u003e 120:\n        lr *\u003d 1e-2\n    elif epoch \u003e 80:\n        lr *\u003d 1e-1\n    print(\u0027Learning rate: \u0027, lr)\n    return lr\n\n\ndef resnet_block(inputs,\n                 num_filters\u003d16,\n                 kernel_size\u003d3,\n                 strides\u003d1,\n                 activation\u003d\u0027relu\u0027,\n                 batch_normalization\u003dTrue,\n                 conv_first\u003dTrue):\n    \"\"\"2D Convolution-Batch Normalization-Activation stack builder\n    # Arguments\n        inputs (tensor): input tensor from input image or previous layer\n        num_filters (int): Conv2D number of filters\n        kernel_size (int): Conv2D square kernel dimensions\n        strides (int): Conv2D square stride dimensions\n        activation (string): activation name\n        batch_normalization (bool): whether to include batch normalization\n        conv_first (bool): conv-bn-activation (True) or\n            activation-bn-conv (False)\n    # Returns\n        x (tensor): tensor as input to the next layer\n    \"\"\"\n    x \u003d inputs\n    if conv_first:\n        x \u003d Conv2D(num_filters,\n                   kernel_size\u003dkernel_size,\n                   strides\u003dstrides,\n                   padding\u003d\u0027same\u0027,\n                   kernel_initializer\u003d\u0027he_normal\u0027,\n                   kernel_regularizer\u003dl2(1e-4))(x)\n        if batch_normalization:\n            x \u003d BatchNormalization()(x)\n        if activation:\n            x \u003d Activation(activation)(x)\n        return x\n    if batch_normalization:\n        x \u003d BatchNormalization()(x)\n    if activation:\n        x \u003d Activation(\u0027relu\u0027)(x)\n    x \u003d Conv2D(num_filters,\n               kernel_size\u003dkernel_size,\n               strides\u003dstrides,\n               padding\u003d\u0027same\u0027,\n               kernel_initializer\u003d\u0027he_normal\u0027,\n               kernel_regularizer\u003dl2(1e-4))(x)\n    return x\n\n\ndef resnet_v1(input_shape, depth, num_classes\u003d10):\n    \"\"\"ResNet Version 1 Model builder [a]\n    Stacks of 2 x (3 x 3) Conv2D-BN-ReLU\n    Last ReLU is after the shortcut connection.\n    The number of filters doubles when the feature maps size\n    is halved.\n    The Number of parameters is approx the same as Table 6 of [a]:\n    ResNet20 0.27M\n    ResNet32 0.46M\n    ResNet44 0.66M\n    ResNet56 0.85M\n    ResNet110 1.7M\n    # Arguments\n        input_shape (tensor): shape of input image tensor\n        depth (int): number of core convolutional layers\n        num_classes (int): number of classes (CIFAR10 has 10)\n    # Returns\n        model (Model): Keras model instance\n    \"\"\"\n    if (depth - 2) % 6 !\u003d 0:\n        raise ValueError(\u0027depth should be 6n+2 (eg 20, 32, 44 in [a])\u0027)\n    # Start model definition.\n    inputs \u003d Input(shape\u003dinput_shape)\n    num_filters \u003d 16\n    num_sub_blocks \u003d int((depth - 2) / 6)\n\n    x \u003d resnet_block(inputs\u003dinputs)\n    # Instantiate convolutional base (stack of blocks).\n    for i in range(3):\n        for j in range(num_sub_blocks):\n            strides \u003d 1\n            is_first_layer_but_not_first_block \u003d j \u003d\u003d 0 and i \u003e 0\n            if is_first_layer_but_not_first_block:\n                strides \u003d 2\n            y \u003d resnet_block(inputs\u003dx,\n                             num_filters\u003dnum_filters,\n                             strides\u003dstrides)\n            y \u003d resnet_block(inputs\u003dy,\n                             num_filters\u003dnum_filters,\n                             activation\u003dNone)\n            if is_first_layer_but_not_first_block:\n                x \u003d resnet_block(inputs\u003dx,\n                                 num_filters\u003dnum_filters,\n                                 kernel_size\u003d1,\n                                 strides\u003dstrides,\n                                 activation\u003dNone,\n                                 batch_normalization\u003dFalse)\n            x \u003d keras.layers.add([x, y])\n            x \u003d Activation(\u0027relu\u0027)(x)\n        num_filters \u003d 2 * num_filters\n\n    # Add classifier on top.\n    # v1 does not use BN after last shortcut connection-ReLU\n    x \u003d AveragePooling2D(pool_size\u003d8)(x)\n    y \u003d Flatten()(x)\n    outputs \u003d Dense(num_classes,\n                    activation\u003d\u0027softmax\u0027,\n                    kernel_initializer\u003d\u0027he_normal\u0027)(y)\n\n    # Instantiate model.\n    model \u003d Model(inputs\u003dinputs, outputs\u003doutputs)\n    return model\n\n\ndef resnet_v2(input_shape, depth, num_classes\u003d10):\n    \"\"\"ResNet Version 2 Model builder [b]\n    Stacks of (1 x 1)-(3 x 3)-(1 x 1) BN-ReLU-Conv2D or also known as\n    bottleneck layer\n    First shortcut connection per layer is 1 x 1 Conv2D.\n    Second and onwards shortcut connection is identity.\n    Features maps sizes: 16(input), 64(1st sub_block), 128(2nd), 256(3rd)\n    # Arguments\n        input_shape (tensor): shape of input image tensor\n        depth (int): number of core convolutional layers\n        num_classes (int): number of classes (CIFAR10 has 10)\n    # Returns\n        model (Model): Keras model instance\n    \"\"\"\n    if (depth - 2) % 9 !\u003d 0:\n        raise ValueError(\u0027depth should be 9n+2 (eg 56 or 110 in [b])\u0027)\n    # Start model definition.\n    inputs \u003d Input(shape\u003dinput_shape)\n    num_filters_in \u003d 16\n    num_filters_out \u003d 64\n    filter_multiplier \u003d 4\n    num_sub_blocks \u003d int((depth - 2) / 9)\n\n    # v2 performs Conv2D with BN-ReLU on input before splitting into 2 paths\n    x \u003d resnet_block(inputs\u003dinputs,\n                     num_filters\u003dnum_filters_in,\n                     conv_first\u003dTrue)\n\n    # Instantiate convolutional base (stack of blocks).\n    activation \u003d None\n    batch_normalization \u003d False\n    for i in range(3):\n        if i \u003e 0:\n            filter_multiplier \u003d 2\n        num_filters_out \u003d num_filters_in * filter_multiplier\n\n        for j in range(num_sub_blocks):\n            strides \u003d 1\n            is_first_layer_but_not_first_block \u003d j \u003d\u003d 0 and i \u003e 0\n            if is_first_layer_but_not_first_block:\n                strides \u003d 2\n            y \u003d resnet_block(inputs\u003dx,\n                             num_filters\u003dnum_filters_in,\n                             kernel_size\u003d1,\n                             strides\u003dstrides,\n                             activation\u003dactivation,\n                             batch_normalization\u003dbatch_normalization,\n                             conv_first\u003dFalse)\n            activation \u003d \u0027relu\u0027\n            batch_normalization \u003d True\n            y \u003d resnet_block(inputs\u003dy,\n                             num_filters\u003dnum_filters_in,\n                             conv_first\u003dFalse)\n            y \u003d resnet_block(inputs\u003dy,\n                             num_filters\u003dnum_filters_out,\n                             kernel_size\u003d1,\n                             conv_first\u003dFalse)\n            if j \u003d\u003d 0:\n                x \u003d resnet_block(inputs\u003dx,\n                                 num_filters\u003dnum_filters_out,\n                                 kernel_size\u003d1,\n                                 strides\u003dstrides,\n                                 activation\u003dNone,\n                                 batch_normalization\u003dFalse)\n            x \u003d keras.layers.add([x, y])\n\n        num_filters_in \u003d num_filters_out\n\n    # Add classifier on top.\n    # v2 has BN-ReLU before Pooling\n    x \u003d BatchNormalization()(x)\n    x \u003d Activation(\u0027relu\u0027)(x)\n    x \u003d AveragePooling2D(pool_size\u003d8)(x)\n    y \u003d Flatten()(x)\n    outputs \u003d Dense(num_classes,\n                    activation\u003d\u0027softmax\u0027,\n                    kernel_initializer\u003d\u0027he_normal\u0027)(y)\n\n    # Instantiate model.\n    model \u003d Model(inputs\u003dinputs, outputs\u003doutputs)\n    return model\n\n\nif version \u003d\u003d 2:\n    model \u003d resnet_v2(input_shape\u003dinput_shape, depth\u003ddepth)\nelse:\n    model \u003d resnet_v1(input_shape\u003dinput_shape, depth\u003ddepth)\n\nmodel.compile(loss\u003d\u0027categorical_crossentropy\u0027,\n              optimizer\u003dAdam(lr\u003dlr_schedule(0)),\n              metrics\u003d[\u0027accuracy\u0027])\nmodel.summary()\nprint(model_type)\n\n# Prepare model model saving directory.\nsave_dir \u003d os.path.join(os.getcwd(), \u0027saved_models\u0027)\nmodel_name \u003d \u0027cifar10_%s_model.{epoch:03d}.h5\u0027 % model_type\nif not os.path.isdir(save_dir):\n    os.makedirs(save_dir)\nfilepath \u003d os.path.join(save_dir, model_name)\n\n# Prepare callbacks for model saving and for learning rate adjustment.\ncheckpoint \u003d ModelCheckpoint(filepath\u003dfilepath,\n                             monitor\u003d\u0027val_acc\u0027,\n                             verbose\u003d1,\n                             save_best_only\u003dTrue)\n\nlr_scheduler \u003d LearningRateScheduler(lr_schedule)\n\nlr_reducer \u003d ReduceLROnPlateau(factor\u003dnp.sqrt(0.1),\n                               cooldown\u003d0,\n                               patience\u003d5,\n                               min_lr\u003d0.5e-6)\n\ncallbacks \u003d [checkpoint, lr_reducer, lr_scheduler]\n\n# Run training, with or without data augmentation.\nif not data_augmentation:\n    print(\u0027Not using data augmentation.\u0027)\n    model.fit(x_train, y_train,\n              batch_size\u003dbatch_size,\n              epochs\u003depochs,\n              validation_data\u003d(x_test, y_test),\n              shuffle\u003dTrue,\n              callbacks\u003dcallbacks)\nelse:\n    print(\u0027Using real-time data augmentation.\u0027)\n    # This will do preprocessing and realtime data augmentation:\n    datagen \u003d ImageDataGenerator(\n        # set input mean to 0 over the dataset\n        featurewise_center\u003dFalse,\n        # set each sample mean to 0\n        samplewise_center\u003dFalse,\n        # divide inputs by std of dataset\n        featurewise_std_normalization\u003dFalse,\n        # divide each input by its std\n        samplewise_std_normalization\u003dFalse,\n        # apply ZCA whitening\n        zca_whitening\u003dFalse,\n        # randomly rotate images in the range (deg 0 to 180)\n        rotation_range\u003d0,\n        # randomly shift images horizontally\n        width_shift_range\u003d0.1,\n        # randomly shift images vertically\n        height_shift_range\u003d0.1,\n        # randomly flip images\n        horizontal_flip\u003dTrue,\n        # randomly flip images\n        vertical_flip\u003dFalse)\n\n    # Compute quantities required for featurewise normalization\n    # (std, mean, and principal components if ZCA whitening is applied).\n    datagen.fit(x_train)\n\n    # Fit the model on the batches generated by datagen.flow().\n    model.fit_generator(datagen.flow(x_train, y_train, batch_size\u003dbatch_size),\n                        validation_data\u003d(x_test, y_test),\n                        epochs\u003depochs, verbose\u003d1, workers\u003d4,\n                        callbacks\u003dcallbacks)\n\n# Score trained model.\nscores \u003d model.evaluate(x_test, y_test, verbose\u003d1)\nprint(\u0027Test loss:\u0027, scores[0])\nprint(\u0027Test accuracy:\u0027, scores[1])",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 6:16:30 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516019553809_-1661872887",
      "id": "20180115-123233_836864548_q_4HFN7W1DYF1527178877",
      "dateCreated": "Jan 15, 2018 12:32:33 PM",
      "dateSubmitted": "May 25, 2018 6:16:30 AM",
      "dateStarted": "May 25, 2018 6:16:30 AM",
      "dateFinished": "May 25, 2018 6:25:00 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "Model : Residual Network\n\nInput : The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. \n\n    The dataset is divided into one training batch with 50000 images and one test batch with 10000 images.\n    \n    Each batch contains a dictionary with the following elements:-\n    \n    data -- a 50000x3072 numpy array of uint8s in case of training sample and 10000x3072 numpy array of uint8s in case of testing sample. Each row of the array stores a                 32x32 colour image. The first 1024 entries contain the red channel values, the next 1024 the green, and the final 1024 the blue. The image is stored in row-major order,     so      that the first 32 entries of the array are the red channel values of the first row of the image.\n    labels -- a list of 50000 numbers in the range 0-9 for training sample and 10000 numbers in the range 0-9 for testing sample. The number at index i indicates the label      of      the ith image in the array data.\n\nOutput : Accuracy based on the correct predictions made by the trained model. Real number in the range 0-1.",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 6:16:30 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516020133125_2221945",
      "id": "20180115-124213_632127882_q_4HFN7W1DYF1527178877",
      "dateCreated": "Jan 15, 2018 12:42:13 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 6:16:30 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516361388618_-2076476134",
      "id": "20180119-112948_1266680035_q_4HFN7W1DYF1527178877",
      "dateCreated": "Jan 19, 2018 11:29:48 AM",
      "dateSubmitted": "May 25, 2018 6:16:30 AM",
      "dateStarted": "May 25, 2018 6:25:00 AM",
      "dateFinished": "May 25, 2018 6:25:00 AM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "CIFAR10_RESNET",
  "id": "4HFN7W1DYF1527178877",
  "angularObjects": {
    "2DDGR2VXT1090031527180054684:shared_process": [],
    "2DEK3QV851090031527168688484:shared_process": [],
    "2DENTX6JV1090031527168688466:shared_process": [],
    "2DDED8P751090031527168688477:shared_process": [],
    "2DE8JRQYX1090031527228139990:shared_process": [],
    "2DDBWFX441090031527168688480:shared_process": []
  },
  "config": {
    "isDashboard": false,
    "defaultLang": "pyspark"
  },
  "info": {},
  "source": "FCN"
}