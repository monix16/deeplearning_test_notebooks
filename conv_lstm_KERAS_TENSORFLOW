{
  "paragraphs": [
    {
      "text": "from keras.models import Sequential\nfrom keras.layers.convolutional import Conv3D\nfrom keras.layers.convolutional_recurrent import ConvLSTM2D\nfrom keras.layers.normalization import BatchNormalization\nimport numpy as np\nimport pylab as plt\n\n# We create a layer which take as input movies of shape\n# (n_frames, width, height, channels) and returns a movie\n# of identical shape.\n\nseq \u003d Sequential()\nseq.add(ConvLSTM2D(filters\u003d40, kernel_size\u003d(3, 3),\n                   input_shape\u003d(None, 40, 40, 1),\n                   padding\u003d\u0027same\u0027, return_sequences\u003dTrue))\nseq.add(BatchNormalization())\n\nseq.add(ConvLSTM2D(filters\u003d40, kernel_size\u003d(3, 3),\n                   padding\u003d\u0027same\u0027, return_sequences\u003dTrue))\nseq.add(BatchNormalization())\n\nseq.add(ConvLSTM2D(filters\u003d40, kernel_size\u003d(3, 3),\n                   padding\u003d\u0027same\u0027, return_sequences\u003dTrue))\nseq.add(BatchNormalization())\n\nseq.add(ConvLSTM2D(filters\u003d40, kernel_size\u003d(3, 3),\n                   padding\u003d\u0027same\u0027, return_sequences\u003dTrue))\nseq.add(BatchNormalization())\n\nseq.add(Conv3D(filters\u003d1, kernel_size\u003d(3, 3, 3),\n               activation\u003d\u0027sigmoid\u0027,\n               padding\u003d\u0027same\u0027, data_format\u003d\u0027channels_last\u0027))\nseq.compile(loss\u003d\u0027binary_crossentropy\u0027, optimizer\u003d\u0027adadelta\u0027)\n\n\n# Artificial data generation:\n# Generate movies with 3 to 7 moving squares inside.\n# The squares are of shape 1x1 or 2x2 pixels,\n# which move linearly over time.\n# For convenience we first create movies with bigger width and height (80x80)\n# and at the end we select a 40x40 window.\n\ndef generate_movies(n_samples\u003d1200, n_frames\u003d15):\n    row \u003d 80\n    col \u003d 80\n    noisy_movies \u003d np.zeros((n_samples, n_frames, row, col, 1), dtype\u003dnp.float)\n    shifted_movies \u003d np.zeros((n_samples, n_frames, row, col, 1),\n                              dtype\u003dnp.float)\n\n    for i in range(n_samples):\n        # Add 3 to 7 moving squares\n        n \u003d np.random.randint(3, 8)\n\n        for j in range(n):\n            # Initial position\n            xstart \u003d np.random.randint(20, 60)\n            ystart \u003d np.random.randint(20, 60)\n            # Direction of motion\n            directionx \u003d np.random.randint(0, 3) - 1\n            directiony \u003d np.random.randint(0, 3) - 1\n\n            # Size of the square\n            w \u003d np.random.randint(2, 4)\n\n            for t in range(n_frames):\n                x_shift \u003d xstart + directionx * t\n                y_shift \u003d ystart + directiony * t\n                noisy_movies[i, t, x_shift - w: x_shift + w,\n                             y_shift - w: y_shift + w, 0] +\u003d 1\n\n                # Make it more robust by adding noise.\n                # The idea is that if during inference,\n                # the value of the pixel is not exactly one,\n                # we need to train the network to be robust and still\n                # consider it as a pixel belonging to a square.\n                if np.random.randint(0, 2):\n                    noise_f \u003d (-1)**np.random.randint(0, 2)\n                    noisy_movies[i, t,\n                                 x_shift - w - 1: x_shift + w + 1,\n                                 y_shift - w - 1: y_shift + w + 1,\n                                 0] +\u003d noise_f * 0.1\n\n                # Shift the ground truth by 1\n                x_shift \u003d xstart + directionx * (t + 1)\n                y_shift \u003d ystart + directiony * (t + 1)\n                shifted_movies[i, t, x_shift - w: x_shift + w,\n                               y_shift - w: y_shift + w, 0] +\u003d 1\n\n    # Cut to a 40x40 window\n    noisy_movies \u003d noisy_movies[::, ::, 20:60, 20:60, ::]\n    shifted_movies \u003d shifted_movies[::, ::, 20:60, 20:60, ::]\n    noisy_movies[noisy_movies \u003e\u003d 1] \u003d 1\n    shifted_movies[shifted_movies \u003e\u003d 1] \u003d 1\n    return noisy_movies, shifted_movies\n\n# Train the network\nnoisy_movies, shifted_movies \u003d generate_movies(n_samples\u003d1200)\nseq.fit(noisy_movies[:1000], shifted_movies[:1000], batch_size\u003d10,\n        epochs\u003d1, validation_split\u003d0.05)\n\n# Testing the network on one movie\n# feed it with the first 7 positions and then\n# predict the new positions\nwhich \u003d 1004\ntrack \u003d noisy_movies[which][:7, ::, ::, ::]\n\nfor j in range(16):\n    new_pos \u003d seq.predict(track[np.newaxis, ::, ::, ::, ::])\n    new \u003d new_pos[::, -1, ::, ::, ::]\n    track \u003d np.concatenate((track, new), axis\u003d0)\n\n\n# And then compare the predictions\n# to the ground truth\ntrack2 \u003d noisy_movies[which][::, ::, ::, ::]\nfor i in range(15):\n    fig \u003d plt.figure(figsize\u003d(10, 5))\n\n    ax \u003d fig.add_subplot(121)\n\n    if i \u003e\u003d 7:\n        ax.text(1, 3, \u0027Predictions !\u0027, fontsize\u003d20, color\u003d\u0027w\u0027)\n    else:\n        ax.text(1, 3, \u0027Initial trajectory\u0027, fontsize\u003d20)\n\n    toplot \u003d track[i, ::, ::, 0]\n\n    plt.imshow(toplot)\n    ax \u003d fig.add_subplot(122)\n    plt.text(1, 3, \u0027Ground truth\u0027, fontsize\u003d20)\n\n    toplot \u003d track2[i, ::, ::, 0]\n    if i \u003e\u003d 2:\n        toplot \u003d shifted_movies[which][i - 1, ::, ::, 0]\n\n    plt.imshow(toplot)\n    plt.savefig(\u0027%i_animate.png\u0027 % (i + 1))",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 18, 2018 11:41:12 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516024205811_957622615",
      "id": "20180115-135005_1535390504_q_A3319TED6V1516024204",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "Train on 950 samples, validate on 50 samples\nEpoch 1/1\n\n 10/950 [..............................] - ETA: 8:32 - loss: 0.8397\n\n 20/950 [..............................] - ETA: 6:15 - loss: 0.9828\n\n 30/950 [..............................] - ETA: 5:28 - loss: 1.0772\n\n 40/950 [\u003e.............................] - ETA: 5:02 - loss: 1.0231\n\n 50/950 [\u003e.............................] - ETA: 4:46 - loss: 1.0256\n\n 60/950 [\u003e.............................] - ETA: 4:35 - loss: 0.9926\n\n 70/950 [\u003d\u003e............................] - ETA: 4:26 - loss: 0.9474\n\n 80/950 [\u003d\u003e............................] - ETA: 4:18 - loss: 0.9060\n\n 90/950 [\u003d\u003e............................] - ETA: 4:12 - loss: 0.8675\n\n100/950 [\u003d\u003d\u003e...........................] - ETA: 4:06 - loss: 0.8334\n\n110/950 [\u003d\u003d\u003e...........................] - ETA: 4:01 - loss: 0.8044\n\n120/950 [\u003d\u003d\u003e...........................] - ETA: 3:57 - loss: 0.7797\n\n130/950 [\u003d\u003d\u003d\u003e..........................] - ETA: 3:52 - loss: 0.7570\n\n140/950 [\u003d\u003d\u003d\u003e..........................] - ETA: 3:48 - loss: 0.7348\n\n150/950 [\u003d\u003d\u003d\u003e..........................] - ETA: 3:44 - loss: 0.7145\n\n160/950 [\u003d\u003d\u003d\u003d\u003e.........................] - ETA: 3:40 - loss: 0.6964\n\n170/950 [\u003d\u003d\u003d\u003d\u003e.........................] - ETA: 3:37 - loss: 0.6794\n\n180/950 [\u003d\u003d\u003d\u003d\u003e.........................] - ETA: 3:33 - loss: 0.6633\n\n190/950 [\u003d\u003d\u003d\u003d\u003d\u003e........................] - ETA: 3:30 - loss: 0.6493\n\n200/950 [\u003d\u003d\u003d\u003d\u003d\u003e........................] - ETA: 3:27 - loss: 0.6360\n\n210/950 [\u003d\u003d\u003d\u003d\u003d\u003e........................] - ETA: 3:23 - loss: 0.6225\n\n220/950 [\u003d\u003d\u003d\u003d\u003d\u003e........................] - ETA: 3:20 - loss: 0.6099\n\n230/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003e.......................] - ETA: 3:17 - loss: 0.5979\n\n240/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003e.......................] - ETA: 3:14 - loss: 0.5865\n\n250/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003e.......................] - ETA: 3:11 - loss: 0.5754\n\n260/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e......................] - ETA: 3:08 - loss: 0.5648\n\n270/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e......................] - ETA: 3:05 - loss: 0.5549\n\n280/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e......................] - ETA: 3:02 - loss: 0.5453\n\n290/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.....................] - ETA: 2:59 - loss: 0.5360\n\n300/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.....................] - ETA: 2:56 - loss: 0.5271\n\n310/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.....................] - ETA: 2:53 - loss: 0.5186\n\n320/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e....................] - ETA: 2:50 - loss: 0.5096\n\n330/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e....................] - ETA: 2:47 - loss: 0.5008\n\n340/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e....................] - ETA: 2:44 - loss: 0.4924\n\n350/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...................] - ETA: 2:42 - loss: 0.4845\n\n360/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...................] - ETA: 2:39 - loss: 0.4766\n\n370/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...................] - ETA: 2:36 - loss: 0.4694\n\n380/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..................] - ETA: 2:33 - loss: 0.4625\n\n390/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..................] - ETA: 2:30 - loss: 0.4559\n\n400/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..................] - ETA: 2:28 - loss: 0.4493\n\n410/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..................] - ETA: 2:25 - loss: 0.4427\n\n420/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.................] - ETA: 2:22 - loss: 0.4363\n\n430/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.................] - ETA: 2:19 - loss: 0.4298\n\n440/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.................] - ETA: 2:16 - loss: 0.4234\n\n450/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e................] - ETA: 2:14 - loss: 0.4172\n\n460/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e................] - ETA: 2:11 - loss: 0.4114\n\n470/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e................] - ETA: 2:08 - loss: 0.4069\n\n480/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...............] - ETA: 2:05 - loss: 0.4016\n\n490/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...............] - ETA: 2:03 - loss: 0.3964\n\n500/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...............] - ETA: 2:00 - loss: 0.3913\n\n510/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..............] - ETA: 1:57 - loss: 0.3862\n\n520/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..............] - ETA: 1:55 - loss: 0.3809\n\n530/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..............] - ETA: 1:52 - loss: 0.3759\n\n540/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.............] - ETA: 1:49 - loss: 0.3710\n\n550/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.............] - ETA: 1:46 - loss: 0.3663\n\n560/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.............] - ETA: 1:44 - loss: 0.3622\n\n570/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e............] - ETA: 1:41 - loss: 0.3582\n\n580/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e............] - ETA: 1:38 - loss: 0.3543\n\n590/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e............] - ETA: 1:36 - loss: 0.3502\n\n600/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e............] - ETA: 1:33 - loss: 0.3463\n\n610/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...........] - ETA: 1:30 - loss: 0.3424\n\n620/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...........] - ETA: 1:27 - loss: 0.3385\n\n630/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...........] - ETA: 1:25 - loss: 0.3344\n\n640/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..........] - ETA: 1:22 - loss: 0.3304\n\n650/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..........] - ETA: 1:19 - loss: 0.3265\n\n660/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..........] - ETA: 1:17 - loss: 0.3227\n\n670/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.........] - ETA: 1:14 - loss: 0.3190\n\n680/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.........] - ETA: 1:11 - loss: 0.3154\n\n690/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.........] - ETA: 1:09 - loss: 0.3118\n\n700/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e........] - ETA: 1:06 - loss: 0.3083\n\n710/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e........] - ETA: 1:03 - loss: 0.3049\n\n720/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e........] - ETA: 1:01 - loss: 0.3016\n\n730/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.......] - ETA: 58s - loss: 0.2985 \n\n740/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.......] - ETA: 55s - loss: 0.2955\n\n750/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.......] - ETA: 53s - loss: 0.2925\n\n760/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e......] - ETA: 50s - loss: 0.2896\n\n770/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e......] - ETA: 47s - loss: 0.2866\n\n780/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e......] - ETA: 45s - loss: 0.2838\n\n790/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e......] - ETA: 42s - loss: 0.2811\n\n800/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.....] - ETA: 39s - loss: 0.2788\n\n810/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.....] - ETA: 37s - loss: 0.2762\n\n820/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.....] - ETA: 34s - loss: 0.2737\n\n830/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e....] - ETA: 31s - loss: 0.2711\n\n840/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e....] - ETA: 29s - loss: 0.2684\n\n850/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e....] - ETA: 26s - loss: 0.2658\n\n860/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...] - ETA: 23s - loss: 0.2633\n\n870/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...] - ETA: 21s - loss: 0.2607\n\n880/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e...] - ETA: 18s - loss: 0.2583\n\n890/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..] - ETA: 15s - loss: 0.2559\n\n900/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..] - ETA: 13s - loss: 0.2536\n\n910/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e..] - ETA: 10s - loss: 0.2513\n\n920/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.] - ETA: 7s - loss: 0.2491 \n\n930/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.] - ETA: 5s - loss: 0.2470\n\n940/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003e.] - ETA: 2s - loss: 0.2449\n\n950/950 [\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d] - 256s 269ms/step - loss: 0.2428 - val_loss: 0.0550\n\n\u003cmatplotlib.text.Text object at 0x7f1a378d5978\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a378d5cf8\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a375f0b00\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a375f0e80\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a3760ff28\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a376365c0\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a36dd4518\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a36dd4c88\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a369697f0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a36965048\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a368de0b8\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a368de828\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a36883c50\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a36809400\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a367ca9e8\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a367d0198\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a3637aa90\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a36380240\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a368abbe0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a36997da0\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a3792f5f8\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a3792fd68\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a362b87b8\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a362b8f28\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a35e448d0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35e3c630\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a35dbb5c0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35dbbd30\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a35d5b128\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35d5b898\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a35d20b38\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35d272e8\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a358516a0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35851e10\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a358a51d0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a358a38d0\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a357ba0f0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a357ba860\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a357172b0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35717a20\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a352a43c8\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35295550\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a3521c0b8\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a3521c828\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a351b8be0\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a351bd390\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a35184630\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a35184da0\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a34cb7160\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a34cb78d0\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a34d07c50\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a34cffdd8\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a34c19b70\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a34c1e320\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a34b76d30\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a34b7c4e0\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a34703e48\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a346f6f28\u003e\n\u003cmatplotlib.text.Text object at 0x7f1a3467ab38\u003e\n\u003cmatplotlib.image.AxesImage object at 0x7f1a346802e8\u003e\n"
      },
      "dateCreated": "Jan 15, 2018 1:50:05 PM",
      "dateStarted": "Jan 18, 2018 11:41:12 AM",
      "dateFinished": "Jan 18, 2018 11:45:54 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "Input : Movies are created Artificially using data generation. Movies with 3 to 7 moving squares inside a window of size 80x80. 1200 in total.\nOutput : Predicted position in the form of images in .png format. 15 images.",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 18, 2018 11:49:33 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516096457054_-588014023",
      "id": "20180116-095417_653813138_q_A3319TED6V1516024204",
      "dateCreated": "Jan 16, 2018 9:54:17 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "conv_lstm_KERAS_TENSORFLOW",
  "id": "A3319TED6V1516024204",
  "angularObjects": {
    "2D7M1HZP5932661518613479637:shared_process": [],
    "2D6B43M8G932661515762929145:shared_process": [],
    "2D35KXZZK932661515762929137:shared_process": []
  },
  "config": {
    "isDashboard": false
  },
  "info": {},
  "source": "FCN"
}