{
  "paragraphs": [
    {
      "text": "os.environ[\"KERAS_BACKEND\"] \u003d \"theano\"\nos.environ[\u0027THEANO_FLAGS\u0027] \u003d \u0027floatX\u003dfloat32,device\u003dcuda,dnn.library_path\u003d/usr/local/cuda/lib64,dnn.include_path\u003d/usr/local/cuda/include/\u0027\nos.environ[\u0027MKL_THREADING_LAYER\u0027] \u003d \"GNU\"",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 7:35:06 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516358450971_1498611767",
      "id": "20180119-104050_729682499_q_52S6FBU4Q71527185003",
      "dateCreated": "Jan 19, 2018 10:40:50 AM",
      "dateSubmitted": "May 24, 2018 6:03:59 PM",
      "dateStarted": "May 24, 2018 6:04:11 PM",
      "dateFinished": "May 24, 2018 6:04:32 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Confirming backend is changed to Theano\nfrom __future__ import print_function\nimport keras\nfrom keras import backend as K\nprint(K.backend())",
      "dateUpdated": "Jan 22, 2018 1:34:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516358458612_-1541289293",
      "id": "20180119-104058_1414842380_q_52S6FBU4Q71527185003",
      "dateCreated": "Jan 19, 2018 10:40:58 AM",
      "dateSubmitted": "May 24, 2018 6:04:11 PM",
      "dateStarted": "May 24, 2018 6:04:32 PM",
      "dateFinished": "May 24, 2018 6:04:47 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "from __future__ import absolute_import\nfrom __future__ import print_function\nimport numpy as np\n\nimport random\nfrom keras.datasets import mnist\nfrom keras.models import Model\nfrom keras.layers import Input, Flatten, Dense, Dropout, Lambda\nfrom keras.optimizers import RMSprop\nfrom keras import backend as K\n\nnum_classes \u003d 10\nepochs \u003d 5\n\n\ndef euclidean_distance(vects):\n    x, y \u003d vects\n    return K.sqrt(K.maximum(K.sum(K.square(x - y), axis\u003d1, keepdims\u003dTrue), K.epsilon()))\n\n\ndef eucl_dist_output_shape(shapes):\n    shape1, shape2 \u003d shapes\n    return (shape1[0], 1)\n\n\ndef contrastive_loss(y_true, y_pred):\n    \u0027\u0027\u0027Contrastive loss from Hadsell-et-al.\u002706\n    http://yann.lecun.com/exdb/publis/pdf/hadsell-chopra-lecun-06.pdf\n    \u0027\u0027\u0027\n    margin \u003d 1\n    return K.mean(y_true * K.square(y_pred) +\n                  (1 - y_true) * K.square(K.maximum(margin - y_pred, 0)))\n\n\ndef create_pairs(x, digit_indices):\n    \u0027\u0027\u0027Positive and negative pair creation.\n    Alternates between positive and negative pairs.\n    \u0027\u0027\u0027\n    pairs \u003d []\n    labels \u003d []\n    n \u003d min([len(digit_indices[d]) for d in range(num_classes)]) - 1\n    for d in range(num_classes):\n        for i in range(n):\n            z1, z2 \u003d digit_indices[d][i], digit_indices[d][i + 1]\n            pairs +\u003d [[x[z1], x[z2]]]\n            inc \u003d random.randrange(1, num_classes)\n            dn \u003d (d + inc) % num_classes\n            z1, z2 \u003d digit_indices[d][i], digit_indices[dn][i]\n            pairs +\u003d [[x[z1], x[z2]]]\n            labels +\u003d [1, 0]\n    return np.array(pairs), np.array(labels)\n\n\ndef create_base_network(input_shape):\n    \u0027\u0027\u0027Base network to be shared (eq. to feature extraction).\n    \u0027\u0027\u0027\n    input \u003d Input(shape\u003dinput_shape)\n    x \u003d Flatten()(input)\n    x \u003d Dense(128, activation\u003d\u0027relu\u0027)(x)\n    x \u003d Dropout(0.1)(x)\n    x \u003d Dense(128, activation\u003d\u0027relu\u0027)(x)\n    x \u003d Dropout(0.1)(x)\n    x \u003d Dense(128, activation\u003d\u0027relu\u0027)(x)\n    return Model(input, x)\n\n\ndef compute_accuracy(y_true, y_pred):\n    \u0027\u0027\u0027Compute classification accuracy with a fixed threshold on distances.\n    \u0027\u0027\u0027\n    pred \u003d y_pred.ravel() \u003c 0.5\n    return np.mean(pred \u003d\u003d y_true)\n\n\ndef accuracy(y_true, y_pred):\n    \u0027\u0027\u0027Compute classification accuracy with a fixed threshold on distances.\n    \u0027\u0027\u0027\n    return K.mean(K.equal(y_true, K.cast(y_pred \u003c 0.5, y_true.dtype)))\n\n\n# the data, shuffled and split between train and test sets\n(x_train, y_train), (x_test, y_test) \u003d mnist.load_data()\nx_train \u003d x_train.astype(\u0027float32\u0027)\nx_test \u003d x_test.astype(\u0027float32\u0027)\nx_train /\u003d 255\nx_test /\u003d 255\ninput_shape \u003d x_train.shape[1:]\n\n# create training+test positive and negative pairs\ndigit_indices \u003d [np.where(y_train \u003d\u003d i)[0] for i in range(num_classes)]\ntr_pairs, tr_y \u003d create_pairs(x_train, digit_indices)\n\ndigit_indices \u003d [np.where(y_test \u003d\u003d i)[0] for i in range(num_classes)]\nte_pairs, te_y \u003d create_pairs(x_test, digit_indices)\n\n# network definition\nbase_network \u003d create_base_network(input_shape)\n\ninput_a \u003d Input(shape\u003dinput_shape)\ninput_b \u003d Input(shape\u003dinput_shape)\n\n# because we re-use the same instance `base_network`,\n# the weights of the network\n# will be shared across the two branches\nprocessed_a \u003d base_network(input_a)\nprocessed_b \u003d base_network(input_b)\n\ndistance \u003d Lambda(euclidean_distance,\n                  output_shape\u003deucl_dist_output_shape)([processed_a, processed_b])\n\nmodel \u003d Model([input_a, input_b], distance)\n\n# train\nrms \u003d RMSprop()\nmodel.compile(loss\u003dcontrastive_loss, optimizer\u003drms, metrics\u003d[accuracy])\nmodel.fit([tr_pairs[:, 0], tr_pairs[:, 1]], tr_y,\n          batch_size\u003d128,\n          epochs\u003depochs,\n          validation_data\u003d([te_pairs[:, 0], te_pairs[:, 1]], te_y))\n\n# compute final accuracy on training and test sets\ny_pred \u003d model.predict([tr_pairs[:, 0], tr_pairs[:, 1]])\ntr_acc \u003d compute_accuracy(tr_y, y_pred)\ny_pred \u003d model.predict([te_pairs[:, 0], te_pairs[:, 1]])\nte_acc \u003d compute_accuracy(te_y, y_pred)\n\nprint(\u0027* Accuracy on training set: %0.2f%%\u0027 % (100 * tr_acc))\nprint(\u0027* Accuracy on test set: %0.2f%%\u0027 % (100 * te_acc))\n",
      "dateUpdated": "Jan 22, 2018 1:34:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516097727976_525702703",
      "id": "20180116-101527_1797067755_q_52S6FBU4Q71527185003",
      "dateCreated": "Jan 16, 2018 10:15:27 AM",
      "dateSubmitted": "May 24, 2018 6:04:32 PM",
      "dateStarted": "May 24, 2018 6:04:47 PM",
      "dateFinished": "May 24, 2018 6:04:48 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "Input : The MNIST dataset contains 60000 training images of 28x28 size and 10000 testing greyscale images of 28x28 size.\n    \n    The dataset is divided into one training batch with 60000 images and one test batch with 10000 images.\n    \n    Each batch contains a dictionary with the following elements:-\n    \n    data -- a 60000x28x28 numpy array of uint8s in case of training sample and 10000x28x28 numpy array of uint8s in case of testing sample. The first dimension of the array \n    marks the image number and the other dimensions is for the image matrix.\n    labels -- a list of 60000 numbers which are either 0 or 1 for training sample and 10000 numbers  for testing sample. The number at index i indicates the label of the ith            image in the array data.\n    \nOutput : The accuracy of the trained model on the training set and the testing set. Real number in the range 0-1.",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 22, 2018 1:34:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516110102405_-153071877",
      "id": "20180116-134142_793682217_q_52S6FBU4Q71527185003",
      "dateCreated": "Jan 16, 2018 1:41:42 PM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "mnist_siamese",
  "id": "52S6FBU4Q71527185003",
  "angularObjects": {
    "2DGERZJ521090031527185018813:shared_process": [],
    "2DEK3QV851090031527168688484:shared_process": [],
    "2DENTX6JV1090031527168688466:shared_process": [],
    "2DDED8P751090031527168688477:shared_process": [],
    "2DDBWFX441090031527168688480:shared_process": []
  },
  "config": {
    "isDashboard": false,
    "defaultLang": "pyspark"
  },
  "info": {},
  "source": "FCN"
}