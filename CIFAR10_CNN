{
  "paragraphs": [
    {
      "text": "os.environ[\"KERAS_BACKEND\"] \u003d \"cntk\"\nos.environ[\u0027CNTK_FLAGS\u0027] \u003d \u0027floatX\u003dfloat32,device\u003dcuda,dnn.library_path\u003d/usr/local/cuda-8.0/lib64,dnn.include_path\u003d/usr/local/cuda-8.0/include/\u0027",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 24, 2018 5:12:48 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516355891662_-1174936285",
      "id": "20180119-095811_1330750893_q_2EQ9B1ER9P1516365367",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jan 19, 2018 9:58:11 AM",
      "dateStarted": "Jan 24, 2018 5:12:48 AM",
      "dateFinished": "Jan 24, 2018 5:14:27 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import cntk\ncntk.all_devices()\nprint(cntk.all_devices())",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 24, 2018 5:14:39 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516710541384_1731864505",
      "id": "20180123-122901_1020184966_q_2EQ9B1ER9P1516365367",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "(GPU[0] GRID K520, CPU)\n"
      },
      "dateCreated": "Jan 23, 2018 12:29:01 PM",
      "dateStarted": "Jan 24, 2018 5:14:39 AM",
      "dateFinished": "Jan 24, 2018 5:14:55 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Confirming backend is changed to CNTK\nfrom __future__ import print_function\nimport keras\nfrom keras import backend as K\nprint(K.backend())",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 23, 2018 12:40:45 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516355917397_413938755",
      "id": "20180119-095837_1629383422_q_2EQ9B1ER9P1516365367",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Using CNTK backend\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3654254876531040202.py\", line 292, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 2, in \u003cmodule\u003e\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/__init__.py\", line 3, in \u003cmodule\u003e\n    from . import utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/__init__.py\", line 6, in \u003cmodule\u003e\n    from . import conv_utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/conv_utils.py\", line 9, in \u003cmodule\u003e\n    from .. import backend as K\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/__init__.py\", line 77, in \u003cmodule\u003e\n    from .cntk_backend import *\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/cntk_backend.py\", line 18, in \u003cmodule\u003e\n    dev \u003d C.device.use_default_device()\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/internal/swig_helper.py\", line 69, in wrapper\n    result \u003d f(*args, **kwds)\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/device.py\", line 114, in use_default_device\n    return cntk_py.DeviceDescriptor.use_default_device()\nRuntimeError: Acquire: Failed to open lock file /var/lock/CNTK_device_allocation_lock: Permission denied.\n\n[CALL STACK]\n[0x7f3556965c2c]                                                       + 0x5a5c2c\n[0x7f3556c8cd41]                                                       + 0x8ccd41\n[0x7f3556c8a67e]    Microsoft::MSR::CNTK::BestGpu::  GetDevices  (int,  Microsoft::MSR::CNTK::BestGpuFlags) + 0x3be\n[0x7f3556c8acaa]    Microsoft::MSR::CNTK::BestGpu::  GetDevice  (Microsoft::MSR::CNTK::BestGpuFlags) + 0x1a\n[0x7f3556c8bcd8]    Microsoft::MSR::CNTK::  GetBestDevice  (std::vector\u003cint,std::allocator\u003cint\u003e\u003e const\u0026) + 0xd8\n[0x7f3556ae4e05]    CNTK::DeviceDescriptor::  UseDefaultDevice  ()     + 0x1d5\n[0x7f3557517ddc]                                                       + 0xb9ddc\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cc91]                                                       + 0x9ac91\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579db4286]    PyEval_EvalFrameEx                                 + 0x6276\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579ddd410]    PyRun_FileExFlags                                  + 0x130\n[0x7f3579ddea03]    PyRun_SimpleFileExFlags                            + 0x183\n[0x7f3579df9ce7]    Py_Main                                            + 0xca7\n[0x400bbd]          main                                               + 0x15d\n[0x7f3578da2c05]    __libc_start_main                                  + 0xf5\n[0x400999]                                                            \n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3654254876531040202.py\", line 299, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3654254876531040202.py\", line 292, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 2, in \u003cmodule\u003e\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/__init__.py\", line 3, in \u003cmodule\u003e\n    from . import utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/__init__.py\", line 6, in \u003cmodule\u003e\n    from . import conv_utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/conv_utils.py\", line 9, in \u003cmodule\u003e\n    from .. import backend as K\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/__init__.py\", line 77, in \u003cmodule\u003e\n    from .cntk_backend import *\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/cntk_backend.py\", line 18, in \u003cmodule\u003e\n    dev \u003d C.device.use_default_device()\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/internal/swig_helper.py\", line 69, in wrapper\n    result \u003d f(*args, **kwds)\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/device.py\", line 114, in use_default_device\n    return cntk_py.DeviceDescriptor.use_default_device()\nRuntimeError: Acquire: Failed to open lock file /var/lock/CNTK_device_allocation_lock: Permission denied.\n\n[CALL STACK]\n[0x7f3556965c2c]                                                       + 0x5a5c2c\n[0x7f3556c8cd41]                                                       + 0x8ccd41\n[0x7f3556c8a67e]    Microsoft::MSR::CNTK::BestGpu::  GetDevices  (int,  Microsoft::MSR::CNTK::BestGpuFlags) + 0x3be\n[0x7f3556c8acaa]    Microsoft::MSR::CNTK::BestGpu::  GetDevice  (Microsoft::MSR::CNTK::BestGpuFlags) + 0x1a\n[0x7f3556c8bcd8]    Microsoft::MSR::CNTK::  GetBestDevice  (std::vector\u003cint,std::allocator\u003cint\u003e\u003e const\u0026) + 0xd8\n[0x7f3556ae4e05]    CNTK::DeviceDescriptor::  UseDefaultDevice  ()     + 0x1d5\n[0x7f3557517ddc]                                                       + 0xb9ddc\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cc91]                                                       + 0x9ac91\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579db4286]    PyEval_EvalFrameEx                                 + 0x6276\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579ddd410]    PyRun_FileExFlags                                  + 0x130\n[0x7f3579ddea03]    PyRun_SimpleFileExFlags                            + 0x183\n[0x7f3579df9ce7]    Py_Main                                            + 0xca7\n[0x400bbd]          main                                               + 0x15d\n[0x7f3578da2c05]    __libc_start_main                                  + 0xf5\n[0x400999]                                                            \n\n\n"
      },
      "dateCreated": "Jan 19, 2018 9:58:37 AM",
      "dateStarted": "Jan 23, 2018 12:41:10 PM",
      "dateFinished": "Jan 23, 2018 12:41:10 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\"\"\"\n    The CIFAR-10 dataset consists of 60000 32x32 colour images in 10 classes, with 6000 images per class. There are 50000 training images and 10000 test images. \n\n    The dataset is divided into one training batch with 50000 images and one test batch with 10000 images.\n    \n    Each batch contains a dictionary with the following elements:-\n    \n    data -- a 50000x3072 numpy array of uint8s in case of training sample and 10000x3072 numpy array of uint8s in case of testing sample. Each row of the array stores a         32x32 colour image. The first 1024 entries contain the red channel values, the next 1024 the green, and the final 1024 the blue. The image is stored in row-major order,     so that the first 32 entries of the array are the red channel values of the first row of the image.\n    labels -- a list of 50000 numbers in the range 0-9 for training sample and 10000 numbers in the range 0-9 for testing sample. The number at index i indicates the label      of the ith image in the array data.\n\"\"\"\n\n\n\n# importing necessary libraries for the neural network such as keras and its layer types\n\nfrom __future__ import print_function\nimport keras\nfrom keras.datasets import cifar10\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nimport os\n\n# setting the parameters used in the model such as batch_size, number of classes, epoch(iterations) etc.\nbatch_size \u003d 32\nnum_classes \u003d 10\nepochs \u003d 1\ndata_augmentation \u003d True\nnum_predictions \u003d 20\nsave_dir \u003d os.path.join(os.getcwd(), \u0027saved_models\u0027)\nmodel_name \u003d \u0027keras_cifar10_trained_model.h5\u0027\n\n# loading the data, shuffled and split between train and test sets.\n(x_train, y_train), (x_test, y_test) \u003d cifar10.load_data()\nprint(\u0027x_train shape:\u0027, x_train.shape)\nprint(x_train.shape[0], \u0027train samples\u0027)\nprint(x_test.shape[0], \u0027test samples\u0027)\n\n# Converting class vectors to binary class matrices.\ny_train \u003d keras.utils.to_categorical(y_train, num_classes)\ny_test \u003d keras.utils.to_categorical(y_test, num_classes)\n\n\n\n# building the sequential CNN model.\nmodel \u003d Sequential()\n\n# adding a convolution2D layer with 32 filters of size 3*3.\nmodel.add(Conv2D(32, (3, 3), padding\u003d\u0027same\u0027,\n                 input_shape\u003dx_train.shape[1:]))\n\n# using \u0027relu\u0027 activation for the convolution2D layer.\nmodel.add(Activation(\u0027relu\u0027))\n\n# adding a convolution2D layer with 32 filters of size 3*3.\nmodel.add(Conv2D(32, (3, 3)))\n\n# using \u0027relu\u0027 activation for the convolution2D layer.\nmodel.add(Activation(\u0027relu\u0027))\n\n# adding maxpooling layer with 2*2 as size of the max pool windows.\nmodel.add(MaxPooling2D(pool_size\u003d(2, 2)))\n\n# adding dropout of 0.25 to the maxpooling layer to avoid overfitting.\nmodel.add(Dropout(0.25))\n\n\n\n# adding a convolution2D layer with 64 filters of size 3*3.\nmodel.add(Conv2D(64, (3, 3), padding\u003d\u0027same\u0027))\n\n# using \u0027relu\u0027 activation for the convolution2D layer.\nmodel.add(Activation(\u0027relu\u0027))\n\n# adding a convolution2D layer with 64 filters of size 3*3.\nmodel.add(Conv2D(64, (3, 3)))\n\n# using \u0027relu\u0027 activation for the convolution2D layer.\nmodel.add(Activation(\u0027relu\u0027))\n\n# adding maxpooling layer with 2*2 as size of the max pool windows.\nmodel.add(MaxPooling2D(pool_size\u003d(2, 2)))\n\n# adding dropout of 0.25 to the maxpooling layer to avoid overfitting.\nmodel.add(Dropout(0.25))\n\n\n\n# making the output from the previous layer flat(1D) to make it adapt for using as input in Dense layers (fully connected).\nmodel.add(Flatten())\n\n# adding dense layer (fully connected) with 512 nodes.\nmodel.add(Dense(512))\n\n# using \u0027relu\u0027 activation for the dense layer.\nmodel.add(Activation(\u0027relu\u0027))\n\n# adding dropout of 0.5 to the dense layer to avoid overfitting.\nmodel.add(Dropout(0.5))\n\n#adding dense layer (fully connected) with 10 nodes.\nmodel.add(Dense(num_classes))\n\n# using \u0027softmax\u0027 activation for the dense layer.\nmodel.add(Activation(\u0027softmax\u0027))\n\n\n# initiating RMSprop optimizer with decay and learning rate.\nopt \u003d keras.optimizers.rmsprop(lr\u003d0.0001, decay\u003d1e-6)\n\n# Compiling the model using categorical_crossentropy as loss function and \u0027RMSprop\u0027 optimizer.\nmodel.compile(loss\u003d\u0027categorical_crossentropy\u0027,\n              optimizer\u003dopt,\n              metrics\u003d[\u0027accuracy\u0027])\n\n# Converting the data from uint8 to float32\nx_train \u003d x_train.astype(\u0027float32\u0027)\nx_test \u003d x_test.astype(\u0027float32\u0027)\nx_train /\u003d 255\nx_test /\u003d 255\n\n\n# this if-else block is used to facilitate data augmentation. Data augmentation is simply increasing the data samples by distorting the image data.\n\nif not data_augmentation:\n    print(\u0027Not using data augmentation.\u0027)\n    # training the model on training data.\n    model.fit(x_train, y_train,\n              batch_size\u003dbatch_size,\n              epochs\u003depochs,\n              validation_data\u003d(x_test, y_test),\n              shuffle\u003dTrue)\nelse:\n    print(\u0027Using real-time data augmentation.\u0027)\n    # This will do preprocessing and realtime data augmentation:\n    datagen \u003d ImageDataGenerator(\n        featurewise_center\u003dFalse,  # set input mean to 0 over the dataset\n        samplewise_center\u003dFalse,  # set each sample mean to 0\n        featurewise_std_normalization\u003dFalse,  # divide inputs by std of the dataset\n        samplewise_std_normalization\u003dFalse,  # divide each input by its std\n        zca_whitening\u003dFalse,  # apply ZCA whitening\n        rotation_range\u003d0,  # randomly rotate images in the range (degrees, 0 to 180)\n        width_shift_range\u003d0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range\u003d0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip\u003dTrue,  # randomly flip images\n        vertical_flip\u003dFalse)  # randomly flip images\n\n    # Compute quantities required for feature-wise normalization\n    # (std, mean, and principal components if ZCA whitening is applied).\n    datagen.fit(x_train)\n\n    # training the model on the batches generated by datagen.flow().\n    model.fit_generator(datagen.flow(x_train, y_train,\n                                     batch_size\u003dbatch_size),\n                        epochs\u003depochs,\n                        validation_data\u003d(x_test, y_test),\n                        workers\u003d4)\n\n# Saving model and weights\nif not os.path.isdir(save_dir):\n    os.makedirs(save_dir)\nmodel_path \u003d os.path.join(save_dir, model_name)\nmodel.save(model_path)\nprint(\u0027Saved trained model at %s \u0027 % model_path)\n\n# finally evaluating and printing the accuracy of the trained model.\nscores \u003d model.evaluate(x_test, y_test, verbose\u003d1)\nprint(\u0027Test loss:\u0027, scores[0])\nprint(\u0027Test accuracy:\u0027, scores[1])\n\n#Output is a real number which is accuracy in the range 0-1.",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 23, 2018 12:40:45 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1515674365369_1559814615",
      "id": "20180111-123925_787397868_q_2EQ9B1ER9P1516365367",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "Using CNTK backend\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3654254876531040202.py\", line 292, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 9, in \u003cmodule\u003e\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/__init__.py\", line 3, in \u003cmodule\u003e\n    from . import utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/__init__.py\", line 6, in \u003cmodule\u003e\n    from . import conv_utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/conv_utils.py\", line 9, in \u003cmodule\u003e\n    from .. import backend as K\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/__init__.py\", line 77, in \u003cmodule\u003e\n    from .cntk_backend import *\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/cntk_backend.py\", line 18, in \u003cmodule\u003e\n    dev \u003d C.device.use_default_device()\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/internal/swig_helper.py\", line 69, in wrapper\n    result \u003d f(*args, **kwds)\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/device.py\", line 114, in use_default_device\n    return cntk_py.DeviceDescriptor.use_default_device()\nRuntimeError: Acquire: Failed to open lock file /var/lock/CNTK_device_allocation_lock: Permission denied.\n\n[CALL STACK]\n[0x7f3556965c2c]                                                       + 0x5a5c2c\n[0x7f3556c8cd41]                                                       + 0x8ccd41\n[0x7f3556c8a67e]    Microsoft::MSR::CNTK::BestGpu::  GetDevices  (int,  Microsoft::MSR::CNTK::BestGpuFlags) + 0x3be\n[0x7f3556c8acaa]    Microsoft::MSR::CNTK::BestGpu::  GetDevice  (Microsoft::MSR::CNTK::BestGpuFlags) + 0x1a\n[0x7f3556c8bcd8]    Microsoft::MSR::CNTK::  GetBestDevice  (std::vector\u003cint,std::allocator\u003cint\u003e\u003e const\u0026) + 0xd8\n[0x7f3556ae4e05]    CNTK::DeviceDescriptor::  UseDefaultDevice  ()     + 0x1d5\n[0x7f3557517ddc]                                                       + 0xb9ddc\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cc91]                                                       + 0x9ac91\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579db4286]    PyEval_EvalFrameEx                                 + 0x6276\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579ddd410]    PyRun_FileExFlags                                  + 0x130\n[0x7f3579ddea03]    PyRun_SimpleFileExFlags                            + 0x183\n[0x7f3579df9ce7]    Py_Main                                            + 0xca7\n[0x400bbd]          main                                               + 0x15d\n[0x7f3578da2c05]    __libc_start_main                                  + 0xf5\n[0x400999]                                                            \n\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3654254876531040202.py\", line 299, in \u003cmodule\u003e\n    raise Exception(traceback.format_exc())\nException: Traceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-3654254876531040202.py\", line 292, in \u003cmodule\u003e\n    exec(code)\n  File \"\u003cstdin\u003e\", line 9, in \u003cmodule\u003e\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/__init__.py\", line 3, in \u003cmodule\u003e\n    from . import utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/__init__.py\", line 6, in \u003cmodule\u003e\n    from . import conv_utils\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/utils/conv_utils.py\", line 9, in \u003cmodule\u003e\n    from .. import backend as K\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/__init__.py\", line 77, in \u003cmodule\u003e\n    from .cntk_backend import *\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/keras/backend/cntk_backend.py\", line 18, in \u003cmodule\u003e\n    dev \u003d C.device.use_default_device()\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/internal/swig_helper.py\", line 69, in wrapper\n    result \u003d f(*args, **kwds)\n  File \"/usr/lib/a-4.2.0-py-3.5.3-dl-gpu-full/lib/python3.5/site-packages/cntk/device.py\", line 114, in use_default_device\n    return cntk_py.DeviceDescriptor.use_default_device()\nRuntimeError: Acquire: Failed to open lock file /var/lock/CNTK_device_allocation_lock: Permission denied.\n\n[CALL STACK]\n[0x7f3556965c2c]                                                       + 0x5a5c2c\n[0x7f3556c8cd41]                                                       + 0x8ccd41\n[0x7f3556c8a67e]    Microsoft::MSR::CNTK::BestGpu::  GetDevices  (int,  Microsoft::MSR::CNTK::BestGpuFlags) + 0x3be\n[0x7f3556c8acaa]    Microsoft::MSR::CNTK::BestGpu::  GetDevice  (Microsoft::MSR::CNTK::BestGpuFlags) + 0x1a\n[0x7f3556c8bcd8]    Microsoft::MSR::CNTK::  GetBestDevice  (std::vector\u003cint,std::allocator\u003cint\u003e\u003e const\u0026) + 0xd8\n[0x7f3556ae4e05]    CNTK::DeviceDescriptor::  UseDefaultDevice  ()     + 0x1d5\n[0x7f3557517ddc]                                                       + 0xb9ddc\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cc91]                                                       + 0x9ac91\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579db4286]    PyEval_EvalFrameEx                                 + 0x6276\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf74c]    PyImport_ImportModuleLevelObject                   + 0x85c\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db5ce3]    PyEval_EvalFrameEx                                 + 0x7cd3\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db613d]    PyEval_EvalFrameEx                                 + 0x812d\n[0x7f3579db6340]    PyEval_EvalFrameEx                                 + 0x8330 (x3)\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579d0cb72]                                                       + 0x9ab72\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579cdc328]    _PyObject_CallMethodIdObjArgs                      + 0xf8\n[0x7f3579dcf2eb]    PyImport_ImportModuleLevelObject                   + 0x3fb\n[0x7f3579dabb1f]                                                       + 0x139b1f\n[0x7f3579d2edd1]    PyCFunction_Call                                   + 0x131\n[0x7f3579cd94c6]    PyObject_Call                                      + 0x56\n[0x7f3579dac5a3]    PyEval_CallObjectWithKeywords                      + 0x43\n[0x7f3579db2ff6]    PyEval_EvalFrameEx                                 + 0x4fe6\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579dab1ee]                                                       + 0x1391ee\n[0x7f3579d2ed99]    PyCFunction_Call                                   + 0xf9\n[0x7f3579db74a6]    PyEval_EvalFrameEx                                 + 0x9496\n[0x7f3579db7fc9]                                                       + 0x145fc9\n[0x7f3579db8158]    PyEval_EvalCodeEx                                  + 0x48\n[0x7f3579db819b]    PyEval_EvalCode                                    + 0x3b\n[0x7f3579ddd410]    PyRun_FileExFlags                                  + 0x130\n[0x7f3579ddea03]    PyRun_SimpleFileExFlags                            + 0x183\n[0x7f3579df9ce7]    Py_Main                                            + 0xca7\n[0x400bbd]          main                                               + 0x15d\n[0x7f3578da2c05]    __libc_start_main                                  + 0xf5\n[0x400999]                                                            \n\n\n"
      },
      "dateCreated": "Jan 11, 2018 12:39:25 PM",
      "dateStarted": "Jan 23, 2018 12:41:10 PM",
      "dateFinished": "Jan 23, 2018 12:41:10 PM",
      "status": "ERROR",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 23, 2018 12:40:45 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516621761913_296024132",
      "id": "20180122-114921_177592104_q_2EQ9B1ER9P1516365367",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jan 22, 2018 11:49:21 AM",
      "dateStarted": "Jan 23, 2018 12:41:10 PM",
      "dateFinished": "Jan 23, 2018 12:41:10 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "CIFAR10_CNN",
  "id": "2EQ9B1ER9P1516365367",
  "angularObjects": {
    "2D7M1HZP5932661518613479637:shared_process": [],
    "2D6B43M8G932661515762929145:shared_process": [],
    "2D35KXZZK932661515762929137:shared_process": []
  },
  "config": {
    "isDashboard": false
  },
  "info": {},
  "source": "FCN"
}