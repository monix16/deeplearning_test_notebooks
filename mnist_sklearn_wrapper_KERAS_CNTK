{
  "paragraphs": [
    {
      "text": "os.environ[\"KERAS_BACKEND\"] \u003d \"cntk\"\nos.environ[\u0027CNTK_FLAGS\u0027] \u003d \u0027floatX\u003dfloat32,device\u003dcuda,dnn.library_path\u003d/usr/local/cuda/lib64,dnn.include_path\u003d/usr/local/cuda/include/\u0027",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 24, 2018 1:29:01 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516358684906_-48140",
      "id": "20180119-104444_1351884160_q_6TR621V4U51516599668",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": ""
      },
      "dateCreated": "Jan 19, 2018 10:44:44 AM",
      "dateStarted": "Jan 24, 2018 1:29:01 PM",
      "dateFinished": "Jan 24, 2018 1:29:29 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Confirming backend is changed to CNTK\nfrom __future__ import print_function\nimport keras\nfrom keras import backend as K\nprint(K.backend())",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 24, 2018 1:30:13 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516358786681_-124752757",
      "id": "20180119-104626_1413191964_q_6TR621V4U51516599668",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "Using CNTK backend\n\nSelected GPU[0] GRID K520 as the process wide default device.\ncntk\n"
      },
      "dateCreated": "Jan 19, 2018 10:46:26 AM",
      "dateStarted": "Jan 24, 2018 1:30:13 PM",
      "dateFinished": "Jan 24, 2018 1:30:31 PM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "from __future__ import print_function\n\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom keras import backend as K\nfrom sklearn.grid_search import GridSearchCV\n\n\nnum_classes \u003d 10\n\n# input image dimensions\nimg_rows, img_cols \u003d 28, 28\n\n# load training data and do basic data normalization\n(x_train, y_train), (x_test, y_test) \u003d mnist.load_data()\n\nif K.image_data_format() \u003d\u003d \u0027channels_first\u0027:\n    x_train \u003d x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)\n    x_test \u003d x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)\n    input_shape \u003d (1, img_rows, img_cols)\nelse:\n    x_train \u003d x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)\n    x_test \u003d x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)\n    input_shape \u003d (img_rows, img_cols, 1)\n\nx_train \u003d x_train.astype(\u0027float32\u0027)\nx_test \u003d x_test.astype(\u0027float32\u0027)\nx_train /\u003d 255\nx_test /\u003d 255\n\n# convert class vectors to binary class matrices\ny_train \u003d keras.utils.to_categorical(y_train, num_classes)\ny_test \u003d keras.utils.to_categorical(y_test, num_classes)\n\n\ndef make_model(dense_layer_sizes, filters, kernel_size, pool_size):\n    \u0027\u0027\u0027Creates model comprised of 2 convolutional layers followed by dense layers\n    dense_layer_sizes: List of layer sizes.\n        This list has one number for each layer\n    filters: Number of convolutional filters in each convolutional layer\n    kernel_size: Convolutional kernel size\n    pool_size: Size of pooling area for max pooling\n    \u0027\u0027\u0027\n\n    model \u003d Sequential()\n    model.add(Conv2D(filters, kernel_size,\n                     padding\u003d\u0027valid\u0027,\n                     input_shape\u003dinput_shape))\n    model.add(Activation(\u0027relu\u0027))\n    model.add(Conv2D(filters, kernel_size))\n    model.add(Activation(\u0027relu\u0027))\n    model.add(MaxPooling2D(pool_size\u003dpool_size))\n    model.add(Dropout(0.25))\n\n    model.add(Flatten())\n    for layer_size in dense_layer_sizes:\n        model.add(Dense(layer_size))\n    model.add(Activation(\u0027relu\u0027))\n    model.add(Dropout(0.5))\n    model.add(Dense(num_classes))\n    model.add(Activation(\u0027softmax\u0027))\n\n    model.compile(loss\u003d\u0027categorical_crossentropy\u0027,\n                  optimizer\u003d\u0027adadelta\u0027,\n                  metrics\u003d[\u0027accuracy\u0027])\n\n    return model\n\ndense_size_candidates \u003d [[32], [64], [32, 32], [64, 64]]\nmy_classifier \u003d KerasClassifier(make_model, batch_size\u003d32)\nvalidator \u003d GridSearchCV(my_classifier,\n                         param_grid\u003d{\u0027dense_layer_sizes\u0027: dense_size_candidates,\n                                     # epochs is avail for tuning even when not\n                                     # an argument to model building function\n                                     \u0027epochs\u0027: [3, 6],\n                                     \u0027filters\u0027: [8],\n                                     \u0027kernel_size\u0027: [3],\n                                     \u0027pool_size\u0027: [2]},\n                         scoring\u003d\u0027neg_log_loss\u0027,\n                         n_jobs\u003d1)\nvalidator.fit(x_train, y_train)\n\nprint(\u0027The parameters of the best model are: \u0027)\nprint(validator.best_params_)\n\n# validator.best_estimator_ returns sklearn-wrapped version of best model.\n# validator.best_estimator_.model returns the (unwrapped) keras model\nbest_model \u003d validator.best_estimator_.model\nmetric_names \u003d best_model.metrics_names\nmetric_values \u003d best_model.evaluate(x_test, y_test)\nfor metric, value in zip(metric_names, metric_values):\n    print(metric, \u0027: \u0027, value)",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 24, 2018 1:10:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516097838702_1656215921",
      "id": "20180116-101718_697291628_q_6TR621V4U51516599668",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "java.lang.NullPointerException\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:170)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:307)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.init(RemoteInterpreter.java:203)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:416)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.getFormType(LazyOpenInterpreter.java:134)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:357)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:200)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:339)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n"
      },
      "dateCreated": "Jan 16, 2018 10:17:18 AM",
      "dateStarted": "Jan 24, 2018 1:10:25 PM",
      "dateFinished": "Jan 24, 2018 1:10:25 PM",
      "status": "ERROR",
      "errorMessage": "java.lang.NullPointerException\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:170)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:307)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.init(RemoteInterpreter.java:203)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:416)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.getFormType(LazyOpenInterpreter.java:134)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:357)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:200)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:339)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "\nBuilds simple CNN models on MNIST and uses sklearn\u0027s GridSearchCV to find best model. Exhaustive search over specified parameter values for an estimator.\n\nInput : The MNIST dataset contains 60000 training images of 28x28 size and 10000 testing greyscale images of 28x28 size.\n    \n    The dataset is divided into one training batch with 60000 images and one test batch with 10000 images.\n    \n    Each batch contains a dictionary with the following elements:-\n    \n    data -- a 60000x28x28 numpy array of uint8s in case of training sample and 10000x28x28 numpy array of uint8s in case of testing sample. The first dimension of the array \n    marks the image number and the other dimensions is for the image matrix.\n    labels -- a list of 60000 numbers which are either 0 or 1 for training sample and 10000 numbers  for testing sample. The number at index i indicates the label of the ith            image in the array data.\n\nOutput \u003d The chosen best model\u0027s metric_values i.e., loss and accuracy.",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 24, 2018 1:10:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516165462784_-1102339340",
      "id": "20180117-050422_41850249_q_6TR621V4U51516599668",
      "dateCreated": "Jan 17, 2018 5:04:22 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 24, 2018 1:10:25 PM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516796910660_-88551393",
      "id": "20180124-122830_1373418508_q_6TR621V4U51516599668",
      "result": {
        "code": "ERROR",
        "type": "TEXT",
        "msg": "java.lang.NullPointerException\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:170)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:307)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.init(RemoteInterpreter.java:203)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:416)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.getFormType(LazyOpenInterpreter.java:134)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:357)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:200)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:339)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n"
      },
      "dateCreated": "Jan 24, 2018 12:28:30 PM",
      "dateStarted": "Jan 24, 2018 1:10:25 PM",
      "dateFinished": "Jan 24, 2018 1:10:25 PM",
      "status": "ERROR",
      "errorMessage": "java.lang.NullPointerException\n\tat org.apache.thrift.transport.TSocket.open(TSocket.java:170)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:51)\n\tat org.apache.zeppelin.interpreter.remote.ClientFactory.create(ClientFactory.java:37)\n\tat org.apache.commons.pool2.BasePooledObjectFactory.makeObject(BasePooledObjectFactory.java:60)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:861)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:435)\n\tat org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:363)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreterProcess.getClient(RemoteInterpreterProcess.java:307)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.init(RemoteInterpreter.java:203)\n\tat org.apache.zeppelin.interpreter.remote.RemoteInterpreter.getFormType(RemoteInterpreter.java:416)\n\tat org.apache.zeppelin.interpreter.LazyOpenInterpreter.getFormType(LazyOpenInterpreter.java:134)\n\tat org.apache.zeppelin.notebook.Paragraph.jobRun(Paragraph.java:357)\n\tat org.apache.zeppelin.scheduler.Job.run(Job.java:200)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler$JobRunner.run(RemoteScheduler.java:339)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "mnist_sklearn_wrapper_KERAS_CNTK",
  "id": "6TR621V4U51516599668",
  "angularObjects": {
    "2D7M1HZP5932661518613479637:shared_process": [],
    "2D6B43M8G932661515762929145:shared_process": [],
    "2D35KXZZK932661515762929137:shared_process": []
  },
  "config": {
    "isDashboard": false
  },
  "info": {},
  "source": "FCN"
}