{
  "paragraphs": [
    {
      "text": "os.environ[\"KERAS_BACKEND\"] \u003d \"theano\"\nos.environ[\u0027THEANO_FLAGS\u0027] \u003d \u0027floatX\u003dfloat32,device\u003dcuda,dnn.library_path\u003d/usr/local/cuda/lib64,dnn.include_path\u003d/usr/local/cuda/include/\u0027\nos.environ[\u0027MKL_THREADING_LAYER\u0027] \u003d \"GNU\"",
      "user": "prashantp@qubole.com",
      "dateUpdated": "May 25, 2018 7:19:41 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516357263866_-225395733",
      "id": "20180119-102103_1323710332_q_KD92U8X2F81527182001",
      "dateCreated": "Jan 19, 2018 10:21:03 AM",
      "dateSubmitted": "May 24, 2018 5:13:55 PM",
      "dateStarted": "May 24, 2018 5:14:06 PM",
      "dateFinished": "May 24, 2018 5:14:28 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "# Confirming backend is changed to Theano\nfrom __future__ import print_function\nimport keras\nfrom keras import backend as K\nprint(K.backend())",
      "dateUpdated": "Jan 22, 2018 5:23:14 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516357259050_-1202288515",
      "id": "20180119-102059_947873015_q_KD92U8X2F81527182001",
      "dateCreated": "Jan 19, 2018 10:20:59 AM",
      "dateSubmitted": "May 24, 2018 5:14:06 PM",
      "dateStarted": "May 24, 2018 5:14:28 PM",
      "dateFinished": "May 24, 2018 5:14:29 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "from __future__ import print_function\nimport keras\nfrom keras.models import Sequential\nfrom keras import layers\nfrom keras.datasets import mnist\nfrom keras import backend as K\n\n\nclass Antirectifier(layers.Layer):\n    \u0027\u0027\u0027This is the combination of a sample-wise\n    L2 normalization with the concatenation of the\n    positive part of the input with the negative part\n    of the input. The result is a tensor of samples that are\n    twice as large as the input samples.\n    It can be used in place of a ReLU.\n    # Input shape\n        2D tensor of shape (samples, n)\n    # Output shape\n        2D tensor of shape (samples, 2*n)\n    # Theoretical justification\n        When applying ReLU, assuming that the distribution\n        of the previous output is approximately centered around 0.,\n        you are discarding half of your input. This is inefficient.\n        Antirectifier allows to return all-positive outputs like ReLU,\n        without discarding any data.\n        Tests on MNIST show that Antirectifier allows to train networks\n        with twice less parameters yet with comparable\n        classification accuracy as an equivalent ReLU-based network.\n    \u0027\u0027\u0027\n\n    def compute_output_shape(self, input_shape):\n        shape \u003d list(input_shape)\n        assert len(shape) \u003d\u003d 2  # only valid for 2D tensors\n        shape[-1] *\u003d 2\n        return tuple(shape)\n\n    def call(self, inputs):\n        inputs -\u003d K.mean(inputs, axis\u003d1, keepdims\u003dTrue)\n        inputs \u003d K.l2_normalize(inputs, axis\u003d1)\n        pos \u003d K.relu(inputs)\n        neg \u003d K.relu(-inputs)\n        return K.concatenate([pos, neg], axis\u003d1)\n\n# global parameters\nbatch_size \u003d 128\nnum_classes \u003d 10\nepochs \u003d 5\n\n# the data, shuffled and split between train and test sets\n(x_train, y_train), (x_test, y_test) \u003d mnist.load_data()\n\nx_train \u003d x_train.reshape(60000, 784)\nx_test \u003d x_test.reshape(10000, 784)\nx_train \u003d x_train.astype(\u0027float32\u0027)\nx_test \u003d x_test.astype(\u0027float32\u0027)\nx_train /\u003d 255\nx_test /\u003d 255\nprint(x_train.shape[0], \u0027train samples\u0027)\nprint(x_test.shape[0], \u0027test samples\u0027)\n\n# convert class vectors to binary class matrices\ny_train \u003d keras.utils.to_categorical(y_train, num_classes)\ny_test \u003d keras.utils.to_categorical(y_test, num_classes)\n\n# build the model\nmodel \u003d Sequential()\nmodel.add(layers.Dense(256, input_shape\u003d(784,)))\nmodel.add(Antirectifier())\nmodel.add(layers.Dropout(0.1))\nmodel.add(layers.Dense(256))\nmodel.add(Antirectifier())\nmodel.add(layers.Dropout(0.1))\nmodel.add(layers.Dense(num_classes))\nmodel.add(layers.Activation(\u0027softmax\u0027))\n\n# compile the model\nmodel.compile(loss\u003d\u0027categorical_crossentropy\u0027,\n              optimizer\u003d\u0027rmsprop\u0027,\n              metrics\u003d[\u0027accuracy\u0027])\n\n# train the model\nmodel.fit(x_train, y_train,\n          batch_size\u003dbatch_size,\n          epochs\u003depochs,\n          verbose\u003d1,\n          validation_data\u003d(x_test, y_test))\n\n# next, compare with an equivalent network\n# with2x bigger Dense layers and ReLU",
      "dateUpdated": "Jan 22, 2018 5:23:14 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "paragraphProgress": {
        "jobs": [],
        "numCompletedTasks": 0,
        "numTasks": 0,
        "truncated": false
      },
      "version": "v0",
      "jobName": "paragraph_1516016983929_-82724363",
      "id": "20180115-114943_529899946_q_KD92U8X2F81527182001",
      "dateCreated": "Jan 15, 2018 11:49:43 AM",
      "dateSubmitted": "May 24, 2018 5:14:29 PM",
      "dateStarted": "May 24, 2018 5:14:29 PM",
      "dateFinished": "May 24, 2018 5:14:29 PM",
      "status": "ERROR",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "Creating custom activation layer which modifies the shape of the tensor that passes through it. Using primitives from Keras.backend() so that it is compatible with both tensorflow and Theano.\nInput :- MNIST dataset. The MNIST dataset contains 60000 training images of 28x28 size and 10000 testing greyscale images of 28x28 size.\n    \n    The dataset is divided into one training batch with 60000 images and one test batch with 10000 images.\n    \n    Each batch contains a dictionary with the following elements:-\n    \n    data -- a 60000x28x28 numpy array of uint8s in case of training sample and 10000x28x28 numpy array of uint8s in case of testing sample. The first dimension of the array \n    marks the image number and the other dimensions is for the image matrix.\n    labels -- a list of 60000 numbers which are either 0 or 1 for training sample and 10000 numbers  for testing sample. The number at index i indicates the label of the ith     image in the array data.\n    \nOutput :- Accuracy of character recognition system. Real number between 0-1.",
      "user": "prashantp@qubole.com",
      "dateUpdated": "Jan 22, 2018 5:23:14 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": false,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516017003923_2057679741",
      "id": "20180115-115003_1926279887_q_KD92U8X2F81527182001",
      "dateCreated": "Jan 15, 2018 11:50:03 AM",
      "status": "READY",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Jan 22, 2018 5:23:14 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true,
        "editorMode": "ace/mode/python"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "version": "v0",
      "jobName": "paragraph_1516360632927_-1761423148",
      "id": "20180119-111712_9231731_q_KD92U8X2F81527182001",
      "dateCreated": "Jan 19, 2018 11:17:12 AM",
      "dateSubmitted": "May 24, 2018 5:14:29 PM",
      "dateStarted": "May 24, 2018 5:14:29 PM",
      "dateFinished": "May 24, 2018 5:14:29 PM",
      "status": "FINISHED",
      "errorMessage": "",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "antirectifier_custom_layer_mnist",
  "id": "KD92U8X2F81527182001",
  "angularObjects": {
    "2DEK3QV851090031527168688484:shared_process": [],
    "2DENTX6JV1090031527168688466:shared_process": [],
    "2DGKB6J8Y1090031527182016321:shared_process": [],
    "2DDED8P751090031527168688477:shared_process": [],
    "2DDBWFX441090031527168688480:shared_process": []
  },
  "config": {
    "isDashboard": false,
    "defaultLang": "pyspark"
  },
  "info": {},
  "source": "FCN"
}